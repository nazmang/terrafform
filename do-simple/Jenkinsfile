pipeline {
  agent { 
      label 'terraform-agent'
  }
  parameters {
      string(name: 'tf_version', defaultValue: '1.1.9', description: 'Terraform version to install')
      string(name: 'tags', defaultValue: '["foo","bar"]', description: 'DO droplet tags')  
      string(name: 'devs', defaultValue: '["droplet-test1"]', description: 'DO droplet(s) name')
      string(name: 'do_region', defaultValue: 'nyc1', description: 'DO region')
      string(name: 'domain_name', defaultValue: 'foo.bar', description: 'DO domain name')
      string(name: 'existing_ssh_key_name', defaultValue: 'KEY.NAME', description: 'DO domain name')
    }
  environment {
    TF_VAR_my_ssh_public_key = credentials('tf-ssh-public-key')
    TF_VAR_my_ssh_private_key_file = credentials('tf-ssh-private-key')
    TF_VAR_existing_ssh_key = "${params.existing_ssh_key_name}"
    TF_VAR_do_token = credentials('do-token')
    TF_VAR_do_region = "${params.do_region}"
    TF_VAR_domain_name = "${params.domain_name}"
    TF_VAR_devs = "${params.devs}"
    TF_VAR_tags = "${params.tags}"    
  }
  stages {
      stage('Install'){
      steps { 
          sh "curl -O https://releases.hashicorp.com/terraform/${params.tf_version}/terraform_${params.tf_version}_linux_amd64.zip"
          sh "unzip terraform_${params.tf_version}_linux_amd64.zip && mv terraform /usr/bin/terraform"
          sh 'apk add --update --no-cache ansible'
        }    
      }
      stage('Checkout') {
      steps {
        checkout([$class: 'GitSCM', branches: [[name: '*/main']],
                userRemoteConfigs: [[url: 'https://github.com/nazmang/terrafform.git']]]) 
                
      }
      }
      stage('TF Plan') {
      steps {
        sh '''
            cd do-simple 
            echo $TF_VAR_my_ssh_public_key > private.key.pub
            terraform init && terraform plan -out myplan -no-color              
        '''                   
      }
      }
      stage('Approval') {
      steps {
        script {
          def userInput = input(id: 'confirm', message: 'Apply Terraform?', parameters: [ [$class: 'BooleanParameterDefinition', defaultValue: false, description: 'Apply terraform', name: 'confirm'] ])
        }
      }
      }
      stage('TF Apply') {
      steps {
        sh 'cd do-simple && terraform apply -input=false myplan'                
      }
    }
  }
}